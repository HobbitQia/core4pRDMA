#include <QDMAController.h>
#include "QDMAController.hpp"
#include "dma.hpp"
#include <map>
#include <memory>
#include <string>
#include <string_view>

#include <fmt/core.h>
#include <fmt/chrono.h>
#include <fmt/ranges.h>
#include <fmt/os.h>
#include <fmt/args.h>
#include <fmt/ostream.h>
#include <fmt/std.h>
#include <fmt/color.h>

#include <unistd.h>
#include <cmath>
#define GLOABL_OFFSET 6
#define GLOBAL_LENGTH 64

using namespace std;

void reset_counters_hbm(FPGACtl *fpga_ctl) {
    fpga_ctl->writeReg(14, 1);
    fpga_ctl->writeReg(14, 0);
}
void throughput_benchmark_print_counters_hbm(FPGACtl *fpga_ctl) {
    // Print counters, copied from code generated by Chisel project.
    fmt::println("tlb.io.tlb_miss_count                                       : {}", fpga_ctl->readReg(512+400));
    fmt::println("io.c2h_cmd.[fire]                                           : {}", fpga_ctl->readReg(512+401));
    fmt::println("io.h2c_cmd.[fire]                                           : {}", fpga_ctl->readReg(512+402));
    fmt::println("io.c2h_data.[fire]                                          : {}", fpga_ctl->readReg(512+403));
    fmt::println("io.h2c_data.[fire]                                          : {}", fpga_ctl->readReg(512+404));
    fmt::println("fifo_c2h_cmd.io.out.[fire]                                  : {}", fpga_ctl->readReg(512+405));
    fmt::println("fifo_h2c_cmd.io.out.[fire]                                  : {}", fpga_ctl->readReg(512+406));
    fmt::println("fifo_c2h_data.io.out.[fire]                                 : {}", fpga_ctl->readReg(512+407));
    fmt::println("fifo_h2c_data.io.in.[fire]                                  : {}", fpga_ctl->readReg(512+408));

    //Report width 1:
    fmt::println("fifo_c2h_cmd.io.out.valid                                   : {}", (fpga_ctl->readReg(512+409) >> 0) & 1);
    fmt::println("fifo_c2h_cmd.io.out.ready                                   : {}", (fpga_ctl->readReg(512+409) >> 1) & 1);
    fmt::println("fifo_h2c_cmd.io.out.valid                                   : {}", (fpga_ctl->readReg(512+409) >> 2) & 1);
    fmt::println("fifo_h2c_cmd.io.out.ready                                   : {}", (fpga_ctl->readReg(512+409) >> 3) & 1);
    fmt::println("fifo_c2h_data.io.out.valid                                  : {}", (fpga_ctl->readReg(512+409) >> 4) & 1);
    fmt::println("fifo_c2h_data.io.out.ready                                  : {}", (fpga_ctl->readReg(512+409) >> 5) & 1);
    fmt::println("fifo_h2c_data.io.in.valid                                   : {}", (fpga_ctl->readReg(512+409) >> 6) & 1);
    fmt::println("fifo_h2c_data.io.in.ready                                   : {}", (fpga_ctl->readReg(512+409) >> 7) & 1);

}

void test_hbm_c2h(uint8_t pci_bus) {
    fmt::println("=====HBM C2H latency benchmark start=====");

    auto fpga_ctl = FPGACtl::getInstance(pci_bus);

    auto cpu_mem_ctl = CPUMemCtl::getInstance(1UL*256*1024*1024);

    size_t size = 1UL*256*1024*1024;

    cpu_mem_ctl->writeTLB([=](uint32_t page_index, uint32_t page_size, uint64_t vaddr, uint64_t paddr) {
        fpga_ctl->writeReg(8, (uint32_t) (vaddr));
        fpga_ctl->writeReg(9, (uint32_t) ((vaddr) >> 32));
        fpga_ctl->writeReg(10, (uint32_t) (paddr));
        fpga_ctl->writeReg(11, (uint32_t) ((paddr) >> 32));
        fpga_ctl->writeReg(12, (page_index == 0));
        fpga_ctl->writeReg(13, 1);
        fpga_ctl->writeReg(13, 0);
    });

    uint32_t total_cmds = 1;
    uint32_t total_words = 1024;
    uint32_t length = 64 * 1024; 
    uint32_t wait_cycles = 50; //100=2.5Mops,when 4K burst, 100=10GB/s
    uint32_t total_qs = 1;

    auto dma_buff = cpu_mem_ctl->alloc(size);
    uint32_t offset = GLOABL_OFFSET;
    size_t * p_c2h = ((size_t *) dma_buff) + size/2/sizeof(size_t);
    for(size_t i=0;i<size/2/sizeof(size_t);i++){
        p_c2h[i]=0;
    }
    fmt::println("h2c addr: 0x{:x}, 0x{:x}",(uint32_t)((uint64_t) dma_buff >> 32), (uint32_t)((uint64_t) dma_buff) );
    fmt::println("c2h addr: 0x{:x}, 0x{:x}",(uint32_t)((uint64_t) p_c2h >> 32), (uint32_t)((uint64_t) p_c2h) );
    fpga_ctl->writeReg(200, (uint32_t) ((uint64_t) p_c2h >> 32));
    fpga_ctl->writeReg(201, (uint32_t) ((uint64_t) p_c2h));
    p_c2h = (size_t *)((uint64_t)p_c2h + 0x10000);
    fmt::println("c2h addr: 0x{:x}, 0x{:x}",(uint32_t)((uint64_t) p_c2h >> 32), (uint32_t)((uint64_t) p_c2h) );
    fpga_ctl->writeReg(202, length);
    fpga_ctl->writeReg(203, offset);
    fpga_ctl->writeReg(205, total_words);
    fpga_ctl->writeReg(206, total_qs);
    fpga_ctl->writeReg(207, total_cmds);
    uint32_t target_addr = 0;
    fpga_ctl->writeReg(214, target_addr);

    for(int i=0;i<1;i++){//one q in total
            fpga_ctl->writeConfig(0x1408/4,i);
            uint32_t tag = fpga_ctl->readConfig(0x140c/4);
            fpga_ctl->writeReg(209, tag);
            fpga_ctl->writeReg(210, i+1);
            fmt::println("{}",tag&0x7f);
    }
    fpga_ctl->writeReg(210, 0);//reset tag_index

    // size_t 也是 64 bit
    int beats = 1;

    reset_counters_hbm(fpga_ctl);

    fmt::println("Card to Host finish setting !");

    fpga_ctl->writeReg(204, 0);
    fpga_ctl->writeReg(204, 1);

    sleep(3);

    fmt::println("Card to Host successfully!");

    unsigned int cycles = fpga_ctl->readReg(512+202);
    fmt::println("Cycles: 0x{:x}",cycles);
    double speed = 1.0*total_words*total_cmds/(1.0*cycles*4/1000/1000/1000)/1024/1024/1024;
    fmt::println("Speed: {:.5f} GB/s",speed);

    unsigned int cur_word = fpga_ctl->readReg(512+201);
    fmt::println("Cur_word: 0x{:x}",cur_word);

    {//c2h
        printf("C2H status:\n");
        int count_error = 0;
        int count_error_word = 0;

        for(int i = 0; i < total_words; i++) {
            int bj = 0;
            for (int j  = 0; j < 8; j++) 
                if (p_c2h[i * 8 + j] != 0)
                    fmt::println("now:    0x{:x}, should be 0x{:x}", p_c2h[i * 8 + j], i * 8 + j);
            // for (int j = 0; j < 8; j++) {
            //     if (p_c2h[i*8+j] != offset + 64 * i + j) {
            //         if (count_error < 20)
            //         fmt::println("now:    0x{:x}, should be 0x{:x}", p_c2h[i*8+j], offset + 64 * i + j);
            //         bj = 1;
            //         count_error ++;
            //     }
            // }
            if (bj == 1) count_error_word++;
        }
        fmt::println("There are total 0x{:x} words transferred", total_words);
        fmt::println("count_error:    0x{:x}, shoule be: 0x0", count_error);
        fmt::println("count_error_word:    0x{:x}, shoule be: 0x0", count_error_word);

        fmt::print("\n");
        throughput_benchmark_print_counters_hbm(fpga_ctl);
    }
    cpu_mem_ctl->free(dma_buff);
}

void test_hbm_h2c(uint8_t pci_bus){
    fmt::println("=====HBM H2C latency benchmark start=====");

    auto fpga_ctl = FPGACtl::getInstance(pci_bus);

    auto cpu_mem_ctl = CPUMemCtl::getInstance(1UL*256*1024*1024);

    size_t size = 1UL*256*1024*1024;

    cpu_mem_ctl->writeTLB([=](uint32_t page_index, uint32_t page_size, uint64_t vaddr, uint64_t paddr) {
        fpga_ctl->writeReg(8, (uint32_t) (vaddr));
        fpga_ctl->writeReg(9, (uint32_t) ((vaddr) >> 32));
        fpga_ctl->writeReg(10, (uint32_t) (paddr));
        fpga_ctl->writeReg(11, (uint32_t) ((paddr) >> 32));
        fpga_ctl->writeReg(12, (page_index == 0));
        fpga_ctl->writeReg(13, 1);
        fpga_ctl->writeReg(13, 0);
    });

    auto dma_buff = cpu_mem_ctl->alloc(size);
    uint32_t offset = GLOABL_OFFSET;
    size_t * p_h2c = (size_t *) dma_buff;

    for(int i = 0; i < size / 2 / 64; i++){//initial
        for (int j = 0; j < 8; j++)
            p_h2c[i*8+j] = offset + i*64 + j;
    }
    uint32_t total_cmds = 1;
    uint32_t total_words = 1024;
    uint32_t length = 64 * 1024; 
    // 一个 word 64 byte, 512 bits
    uint32_t wait_cycles = 50; //100=2.5Mops,when 4K burst, 100=10GB/s
    uint32_t is_seq = 1;
    uint32_t total_qs = 1;

    uint32_t range = 0;
    uint32_t range_words = range / 64;
    fmt::println("addr: 0x{:x}, 0x{:x}",(uint32_t)((uint64_t) p_h2c >> 32), (uint32_t)((uint64_t) p_h2c) );
    fpga_ctl->writeReg(100, (uint32_t) ((uint64_t) p_h2c >> 32));
    fpga_ctl->writeReg(101, (uint32_t) ((uint64_t) p_h2c));
    fpga_ctl->writeReg(102, length);
    fpga_ctl->writeReg(103, offset);
    fpga_ctl->writeReg(104, 1); //sop
    fpga_ctl->writeReg(105, 1); //eop
    fpga_ctl->writeReg(107, total_words);
    fpga_ctl->writeReg(108, total_qs);
    fpga_ctl->writeReg(109, total_cmds);
    fpga_ctl->writeReg(110, range); // is_seq = 1 时，不用 range
    fpga_ctl->writeReg(111, range_words);
    fpga_ctl->writeReg(112, is_seq);

    uint32_t target_addr = 0;
    fpga_ctl->writeReg(114, target_addr);

    reset_counters_hbm(fpga_ctl);

    //start
    fpga_ctl->writeReg(106, 0);
    fpga_ctl->writeReg(106, 1);
    sleep(4);

    unsigned int cycles = fpga_ctl->readReg(512+101);
    fmt::println("Cycles: 0x{:x}",cycles);
    double speed = 1.0*total_words*64/(1.0*cycles*4/1000/1000/1000)/1024/1024/1024;
    fmt::println("Speed: {:.5f} GB/s",speed);

    unsigned int cur_word = fpga_ctl->readReg(512+100);
    fmt::println("Cur_word: 0x{:x}",cur_word);

    fmt::println("Host to card(HBM) successfully!");
    for (int i = 0; i < 8; i++)
            fmt::println("count_error:    0x{:x}",p_h2c[i]);


    {//h2c
        throughput_benchmark_print_counters_hbm(fpga_ctl);
        }
    cpu_mem_ctl->free(dma_buff);
}


int main() {
    // test_hbm_h2c(0x40);
    test_hbm_c2h(0x40);
    return 0;
}
